version: 2.0

build_jobs: &build_jobs
  jobs:
    - build-amd64
    - build-arm64
    - build-armhf
    - push-manifest:
        requires:
          - build-amd64
          - build-arm64
          - build-armhf

workflows:
  version: 2
  commit:
    <<: *build_jobs
  nightly:
    <<: *build_jobs
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master

shared: &shared
  docker:
    - image: docker:stable-git
  steps:
    - checkout

    - run:
        name: Install build dependencies.
        command: apk add --no-cache bash curl jq

    - run:
        # Unforunately, there's no easy way to "merge" anchors/references
        # according to the # YAML 1.2 spec. So, the recommended way to handle
        # this is to dump your # values into a file and source it at build time.
        # @see e.g., https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables
        name: Set up shared environment vars.
        command: |
          echo 'export GITHUB_REPO=jessestuart/elasticsearch_exporter' >> $BASH_ENV
          echo 'export GO_REPO=github.com/justwatchcom/elasticsearch_exporter' >> $BASH_ENV

          echo 'export GOPATH=$HOME/go' >> $BASH_ENV
          echo 'export GOROOT=/usr/local/go/' >> $BASH_ENV
          echo 'export PROJECT_PATH=$GOPATH/src/$GO_REPO' >> $BASH_ENV

          echo 'export VERSION=$(curl -s https://api.github.com/repos/justwatchcom/elasticsearch_exporter/releases | jq -r "sort_by(.tag_name)[-1].tag_name")' >> $BASH_ENV
          echo 'export REGISTRY=jessestuart' >> $BASH_ENV
          echo 'export IMAGE=elasticsearch_exporter' >> $BASH_ENV
          echo 'export IMAGE_ID="${REGISTRY}/${IMAGE}:${VERSION}-${TAG}"' >> $BASH_ENV

          echo 'export PATH="$GOROOT/bin:$GOPATH/bin:$PATH"' >> $BASH_ENV

          source $BASH_ENV

          if [ $VERSION == 'null' ]; then
            echo "Unable to determine version."
            exit 1
          fi

    - restore_cache:
        keys:
          - go-1.11
    - run:
        name: Update Go version.
        command: |
          curl -O https://storage.googleapis.com/golang/go1.11.linux-amd64.tar.gz
          tar xzf go1.11.linux-amd64.tar.gz
          rm -rf /usr/local/go
          mv go/ /usr/local/
          export CI_USER=$(whoami)
          chown "${CI_USER}:" /usr/local/go
    - save_cache:
        key: go-1.11
        paths:
          - /usr/local/go

    - run:
        name: Clone repo.
        command: |
          source $BASH_ENV
          mkdir -p $PROJECT_PATH
          git clone https://${GO_REPO} --depth=1 \
            $PROJECT_PATH &>/dev/null
          cp -f Dockerfile $PROJECT_PATH

    - run:
        name: Compile architecture-specific binary.
        command: |
          source $BASH_ENV
          cd $PROJECT_PATH
          go build .
          ls -alh

    - run:
        name: Build and push Docker image.
        command: |
          source $BASH_ENV
          pwd
          cp $PROJECT_PATH/$IMAGE .
          ls -alh
          .circleci/push-multiarch.sh

jobs:
  build-amd64:
    <<: *shared
    environment:
      GOARCH: amd64
      PROMU_ARCH: amd64
      QEMU_ARCH: amd64
      TAG: amd64
      TARGET: amd64
  build-arm64:
    <<: *shared
    environment:
      GOARCH: arm64
      PROMU_ARCH: arm64
      QEMU_ARCH: aarch64
      QEMU_VERSION: v2.11.0
      TAG: arm64
      TARGET: arm64v8
  build-armhf:
    <<: *shared
    environment:
      GOARCH: arm
      PROMU_ARCH: armv7
      QEMU_ARCH: arm
      QEMU_VERSION: v2.11.0
      TAG: arm
      TARGET: arm32v6

  # =======================================
  # ---------------------------------------
  # =======================================

  push-manifest:
    docker:
      - image: docker:18-git
    environment:
      GITHUB_REPO: justwatchcom/elasticsearch_exporter
      IMAGE: elasticsearch_exporter
      REGISTRY: jessestuart
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Determine repo version.
          command: |
            apk update && apk add curl jq
            curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r ".tag_name" > ~/VERSION

      - run:
          name: Install manifest-tool.
          command: |
            export VERSION=$(cat ~/VERSION)
            echo "Downloading manifest-tool."
            wget https://github.com/estesp/manifest-tool/releases/download/v0.7.0/manifest-tool-linux-amd64
            mv manifest-tool-linux-amd64 /usr/bin/manifest-tool
            chmod +x /usr/bin/manifest-tool
            manifest-tool --version

      - run:
          name: Push Docker manifest.
          command: |
            export VERSION=$(cat ~/VERSION)
            echo "Pushing manifest ${REGISTRY}/${IMAGE}:latest"
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin;
            manifest-tool push from-args \
              --platforms linux/arm,linux/arm64,linux/amd64 \
              --template "$REGISTRY/$IMAGE:$VERSION-ARCH" \
              --target "$REGISTRY/$IMAGE:latest"
            manifest-tool push from-args \
              --platforms linux/arm,linux/arm64,linux/amd64 \
              --template "$REGISTRY/$IMAGE:$VERSION-ARCH" \
              --target "$REGISTRY/$IMAGE:$VERSION"
      - run:
          name: Verify manifest was persisted remotely.
          command: |
            export VERSION=$(cat ~/VERSION)
            manifest-tool inspect "$REGISTRY/$IMAGE:$VERSION"

